{"pageProps":{"post":{"attributes":{"title":"Mocking","description":"Mocking"},"html":"<h2 id=\"mocking\">Mocking</h2>\n<br />\n<br />\n\n<h4 id=\"mock-the-right-things\"><strong>Mock the right things</strong></h4>\n<p>We use mocking for primarily two reasons:</p>\n<br />\n\n<ol>\n<li>speed up testing</li>\n<li>have a degree of immutability</li>\n</ol>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<p>With that said, we have mainly mocked things that would be time consuming to test in the cloud because of service deployment and provisioning time.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<p>We still do integration tests, but not all the time. The mocks are there to help us go faster in local development.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"designing-for-testability\"><strong>Designing for testability</strong></h4>\n<p>Building your stuff so it is testable is important. It is not always easy, but it is worth it.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<p>Something like this:</p>\n<p><img src=\"/./images/testable-component-design-ecb-pattern.png\" alt=\"\"></p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"we-have-several-test-applications\"><strong>We have several test applications</strong></h4>\n<p><img src=\"/./images/test-apps.png\" alt=\"\"></p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<p>An example of the tabular regression app:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> http\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> pathlib\n<span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">import</span> traceback\n\n<span class=\"hljs-keyword\">from</span> pydantic <span class=\"hljs-keyword\">import</span> ValidationError\n\n<span class=\"hljs-keyword\">from</span> iu_validation.evaluation.integrations.pydantic_models <span class=\"hljs-keyword\">import</span> Response, Request, IUResultRegression\n\nROOT_DIR = <span class=\"hljs-built_in\">str</span>(pathlib.Path(__file__).parents[<span class=\"hljs-number\">2</span>])\nsys.path.insert(<span class=\"hljs-number\">0</span>, ROOT_DIR)\n\n<span class=\"hljs-keyword\">import</span> uvicorn\n\n<span class=\"hljs-keyword\">import</span> argparse\n<span class=\"hljs-keyword\">import</span> pickle\n<span class=\"hljs-keyword\">import</span> os.path\n\n<span class=\"hljs-keyword\">from</span> iu_validation.utils.util <span class=\"hljs-keyword\">import</span> test_models_path\n<span class=\"hljs-keyword\">from</span> iu_validation.test_apps.util <span class=\"hljs-keyword\">import</span> (\n    read_body,\n    get_ping_response_context,\n    get_response_context_from_response,\n    get_validation_error_response_context,\n    get_exception_response_context,\n    get_resource_not_found_response_context,\n    send_response,\n)\n\nMODEL = pickle.load(<span class=\"hljs-built_in\">open</span>(os.path.join(test_models_path(), <span class=\"hljs-string\">&quot;tabular_regression_model.pkl&quot;</span>), <span class=\"hljs-string\">&quot;rb&quot;</span>))\n\nMODEL_INPUT_FIELDS = [\n    <span class=\"hljs-string\">&quot;area&quot;</span>,\n    <span class=\"hljs-string\">&quot;bedrooms&quot;</span>,\n    <span class=\"hljs-string\">&quot;bathrooms&quot;</span>,\n    <span class=\"hljs-string\">&quot;stories&quot;</span>,\n    <span class=\"hljs-string\">&quot;guestroom&quot;</span>,\n    <span class=\"hljs-string\">&quot;basement&quot;</span>,\n    <span class=\"hljs-string\">&quot;parking&quot;</span>,\n    <span class=\"hljs-string\">&quot;areaperbedroom&quot;</span>,\n    <span class=\"hljs-string\">&quot;bbratio&quot;</span>,\n]\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">app</span>(<span class=\"hljs-params\">scope, receive, send</span>):\n    path = scope[<span class=\"hljs-string\">&quot;path&quot;</span>]\n    <span class=\"hljs-keyword\">if</span> path == <span class=\"hljs-string\">&quot;/api/ping&quot;</span>:\n        response_context = get_ping_response_context()\n    <span class=\"hljs-keyword\">elif</span> path == <span class=\"hljs-string\">&quot;/api/predict&quot;</span>:\n        <span class=\"hljs-keyword\">try</span>:\n            request_body = json.loads(<span class=\"hljs-keyword\">await</span> read_body(receive))\n            request = Request(**request_body)\n            response = predict(request)\n            response_context = get_response_context_from_response(response)\n        <span class=\"hljs-keyword\">except</span> ValidationError <span class=\"hljs-keyword\">as</span> exception:\n            response_context = get_validation_error_response_context(exception)\n        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> exception:\n            traceback.print_exc()\n            response_context = get_exception_response_context(exception)\n    <span class=\"hljs-keyword\">else</span>:\n        response_context = get_resource_not_found_response_context(path)\n\n    <span class=\"hljs-keyword\">await</span> send_response(response_context, send)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">predict</span>(<span class=\"hljs-params\">request: Request</span>) -&gt; Response:\n    request_dict = request.examples[<span class=\"hljs-number\">0</span>]\n    model_input = [[request_dict[input_field] <span class=\"hljs-keyword\">for</span> input_field <span class=\"hljs-keyword\">in</span> MODEL_INPUT_FIELDS]]\n    prediction = MODEL.predict(model_input)\n    <span class=\"hljs-keyword\">return</span> Response(result=[IUResultRegression(output=<span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">round</span>(prediction[<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">2</span>)))])\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    argumentParser = argparse.ArgumentParser(\n        description=<span class=\"hljs-string\">&quot;Test application for exercising tabular inference unit validation&quot;</span>\n    )\n    argumentParser.add_argument(\n        <span class=\"hljs-string\">&quot;port&quot;</span>,\n        <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-built_in\">int</span>,\n    )\n    arguments = argumentParser.parse_args()\n    uvicorn.run(<span class=\"hljs-string\">&quot;tabular_regression:app&quot;</span>, port=arguments.port, log_level=<span class=\"hljs-string\">&quot;info&quot;</span>)\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"mocking-it\"><strong>Mocking it</strong></h4>\n<p>Using Behave as orchestrator for the test runs, they call the IUV docker container, which in turn calls the mock application that behaves like a simulated real deployed AI  model.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<p>Super high-level, it looks like this:</p>\n<p><img src=\"/./images/mock-app-construction.png\" alt=\"\"></p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />","slug":"mocking","title":"Mocking","section":"How We Have Done Things","icon":"info-circle","filePath":"/home/runner/work/lasselundstenjensen.github.io/lasselundstenjensen.github.io/lessons/01-how-we-have-done-things/D-mocking.md","nextSlug":"/lessons/how-we-have-done-things/case-deepchecks","prevSlug":"/lessons/how-we-have-done-things/special-tags-we-use-and-why"}},"__N_SSG":true}